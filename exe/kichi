#!/usr/bin/env ruby

require "kichi"
require "aws-sdk-core"
require "yaml"
require "fileutils"

subcommand = ARGV.shift

class Kichi
	def initialize(settings)
		@settings = settings
		@s3 = Aws::S3::Client.new
	end

	def s3
		@s3
	end

	def set_var(var_name, var_content)
		s3.put_object(bucket: settings[:s3_bucket], key: 'object-key', body: {type: "envvar"}.to_json)
	end
end

class Commands
	def initialize
		@settings_dir = File.join(Dir.home, ".kichi")
	end

	def use
		what = ARGV.shift
		case what
		when "s3"
			sts = Aws::STS::Client.new
			s3 = Aws::S3::Client.new

			account_id = sts.get_caller_identity.account
			begin
				bucket_name = "kichi-store-#{account_id}"
				s3.head_bucket(bucket: bucket_name)
			rescue Aws::S3::Errors::NotFound => e
				puts "Bucket not found, creating..."
				s3.create_bucket(bucket: bucket_name)
			rescue => e
				puts "You may not have permission to view the kichi bucket"
			end

			FileUtils.mkdir_p @settings_dir
			File.write(File.join(@settings_dir, "settings"), {s3_bucket: bucket_name}.to_json)

		else
			puts "Unknown store '#{what}'"
		end
	end

	def set
		var_name = ARGV.shift
		var_content = ARGV.shift
		kichi.set_var(var_name, var_content)
	end

	def create
		puts "nyan"
	end

	def add
		puts "nyan"
	end
	
	def list
		puts "nyan"
	end

	def in
		puts "nyan"
	end

	def unset
		puts "nyan"
	end

	def rm
		puts "nyan"
	end

	def delete
		puts "nyan"
	end

	def method_missing(name,*args,&block)
		puts "Unknown command '#{name}'"
	end

	private

	def kichi
		if !File.exists(File.join(@settings_dir, "settings"))
			puts "Please setup kichi by calling kichi use s3"
			exit!
		end
		settings = JSON.parse(File.read(File.join(@settings_dir, "settings")))
		Kichi.new settings
	end
end

Commands.new.send(:"#{subcommand}")
